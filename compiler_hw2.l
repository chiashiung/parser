%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include "y.tab.h"	/* header file generated by bison */
	
	#define MAX	256

	extern char msg[256];

	int linenum = 0;
	int charnum = 0;
	char temp[256];

	void showinfo(char *type,char *word);
	void nlinecount(char *word);
	void create();
	int lookup(char *word);
	int insert(char *word);
	void dump();
	int hash(char *word);
%}

/* Define regular expression label */
digit           [0-9]
letter			[A-Za-z]
pinumber		[1-9]{digit}+
npinumber       [-][1-9]{digit}+|[0]
fnumber         (-?({digit}+|{digit}*\.{digit}+)([eE][+-]?{digit}+)?f?)
id              ([\_\$]|{letter})+([\_\$]|{letter}|{digit})*
inv_id			([\^\#]|{digit})+([\_\$]|{letter}|{digit})*
ws				[ \t]
inv_str         \'[^(\'|\n)]*\'|\"[^(\"|\n)]*
string          \"([^(\"|\n|\\\")]|\\\")*\"
comment         ([/]{2}.*)\n
comments        "/*"[^("*/")]*"*/"

/* Rule Section*/
%%
<<EOF>>     	{linenum++;yyterminate();}
"+" 			{return PLUS;}			
"-"				{return MINUS;}
"*" 			{return MUL;}
"/"				{return DIV;}
"%"				{return MOD;}
"++" 			{return INC;}
"--" 			{return DEC;}

"=" 			{return '=';}
"+="			{return ADD_ASSIGN;}
"-="			{return SUB_ASSIGN;}
"*="			{return MUL_ASSIGN;}
"/="			{return DIV_ASSIGN;}
"%="			{return MOD_ASSIGN;}

"<"				{return LT;}
">"				{return GT;}
"<=" 			{return LEQ;}
">=" 			{return GEQ;}
"==" 			{return EQ;}
"!=" 			{return NEQ;}

"&&" 			{return LAND;}
"||" 			{return LOR;}
"!"				{return NOT;}

"("				{return '(';}
")"				{return ')';}
"["				{return '[';}
"]"				{return ']';}
"{"				{return '{';}	
"}"				{return '}';}

","				{return ',';}
";"				{return ';';}
":"				{return ':';}
"\n"            {linenum++;return NEWLINE;}

boolean			{return BOOL;}
char			{return CHAR;}
int				{return INT;}
float			{return FLOAT;}
string			{return STRING;}
void			{return VOID;}

final			{return FINAL;}
new				{return NEW;}
static			{return STATIC;}

public			{return PUBLIC;}
protected		{return PROTECTED;}
private			{return PRIVATE;}

true			{return TRUE;}
false			{return FALSE;}

if				{return IF;}
else			{return ELSE;}

print			{return PRINT;}

break |
byte |
case |
catch |
class |
continue |
default |
do |
double |
extend |
finally |
for |
implements |
long |
main |
return |
short |
switch |
this |
try |
while			{showinfo("reserved word",yytext);}
{pinumber}      {sscanf(yytext, "%d", &yylval.pint_val); return PINT_LIT;}
{npinumber}		{sscanf(yytext, "%d", &yylval.npint_val); return NPINT_LIT;}
{fnumber}       {sscanf(yytext, "%f", &yylval.float_val); return FLOAT_LIT;}
{id}			{yylval.id_val = strdup(yytext); return ID;}
{inv_id}		{showinfo("invalid identifier",yytext);}
{ws}			{sprintf(temp,"%s",yytext);strcat(msg,temp);}
{inv_str}       {printf("Line:%d,1st char:%d,%s is a \"invalid string\"\n",linenum+1,charnum+1,yytext);}
{string}        {yylval.s_val = strdup(yytext); return STRING_LIT;;}
{comment}       {linenum++;charnum=0;}
{comments}		{nlinecount(yytext);}
.				{;}
%%
int yywrap(void)
{
    return 1;
}

void showinfo(char *type,char *word){
	printf("Line:%d,1st char:%d,\"%s\" is a \"%s\"\n",linenum+1,charnum+1,word,type);
	charnum += yyleng;
}

void nlinecount(char* word){
	int count=0;
	for(int i=0;i<yyleng;i++){
		count++;
		if((int)word[i]==10){
			linenum++;
			count=0;
		}
	}
	charnum += count;
}

struct id_data{
	char* id_name;
	struct	id_data *next;
};

struct id_data *s;	//for symbol table

void create(){
	s = malloc(sizeof(struct id_data) * MAX);
	for(int i=0;i<MAX;i++)
		s[i].next = NULL;
}

int lookup(char *word){
	int hashnum = hash(word);
	struct id_data *p = &s[hashnum];
	p = p->next;
	while(p){
		if(strcmp(p->id_name,word)==0) return hashnum;
		p = p->next;
	}
	return -1;
}

int insert(char *word){
	int hashnum = hash(word);
	struct id_data *node;
	if(lookup(word)>=0){
		//printf("%s is already in the table\n",word);
		return -1;
	}
	node = (struct id_data *) malloc(sizeof(struct id_data));
	if(s[hashnum].next==NULL)
		node->next = NULL;
	else
		node->next = s[hashnum].next;
	s[hashnum].next = node;
	node->id_name = (char *) malloc(strlen(word)+1);
	strcpy(node->id_name,word);
	return hashnum;
}

void dump(){
	printf("The symbol table contains:\n");
	for(int i=0;i<MAX;i++){
		int count=0;
		struct id_data *p =  &s[i];
		p = p->next;
		if(p){
			printf("index %d:\n",i);
			while(p){
				printf("	%-10s",p->id_name);
				count++;
				if((count%5)==0) printf("\n");
				p = p->next;
			}
			if((count%5)!=0) printf("\n");
		}
	}
}

int hash(char *word){
	int sum = 0;
	int hashnum;
	for(int i=0;i<strlen(word);i++)
		sum += (int)word[i];
	hashnum = sum % MAX;
	return hashnum;
}
